@page "/"
@using CraftmanshipBlog.Models
@inject IJSRuntime Js;
<section class="presentation">
    <div class="content">
        <h1 class="heading-primary">Benazet Vincent</h1>
        <div class="info">
            <p class="text-primary">
                Ingénieur .Net full stack. Passionné en développement
                et en architecture avec une expertise technique en constante
                progression.
            </p>
        </div>
    </div>
    <div class="socials">
        <div>
            <a href="https://www.linkedin.com/in/vincent-benazet-6a3346aa" class="social-icon-link" rel="noreferrer" target="_blank">
                <img src="linkedin-dark.svg" alt="Benazet Vincent Linkedin Profile" class="social-icon">
            </a>
        </div>
        <div>
            <a href="https://github.com/vnc4567" class="social-icon-link" rel="noreferrer" target="_blank">
                <img src="github-dark.svg" alt="Benazet Vincent Github Profile" class="social-icon">
            </a>
        </div>
    </div>
    <div class="mouse-scroll-cont">
        <div class="mouse"></div>
    </div>
</section>
<section id="about" class="about sec-pad">
    <div class="main-container">
        @if (_experiences != null)
        {
            @for (int i = 0; i < _experiences.Count; i++)
            {
                <Experience ExperienceItem="_experiences[i]" IsLeft="@(i % 2 == 0)"/>
            }
        }
    </div>
</section>

@code{

    List<ExperienceItem> _experiences = null;

    protected override void OnInitialized()
    {
        _experiences = new()
        {
            new ExperienceItem(date: "JUIN 2023 – MAINTENANT", enterprise: "OPPORTUNITY", poste: "Architect logiciel", items: new Dictionary<string, List<string>>()
            {
                { "Découpage du monolith en domaine", new List<string>() { "EventStorming", "Identification des sous domaines" } },
                { "Mise en place des micro-services", new List<string>() { "Database par service", "Circuit Breaker", "EventOutbox", "MassTransit" } },
                { "Utilisation d'AWS", new List<string>() { "AmazonMQ - RabbitMQ", "AWS AppConfig", "SecretManager", "S3" } },
                { "Observabilité", new List<string>() { "OpenTelemetry (Sidecar Otel Collector)", "Datagog", "Logging", "Tracing", "Monitoring", "Alerting" } },
            }),
            new ExperienceItem(date: "JUIN 2021 – JUIN 2023", enterprise: "UBALDI", poste: "Ingénieur études et développement", items: new Dictionary<string, List<string>>()
            {
                { "Réalisation d’applications .Net Core", new List<string>() { "Blazor server", "JobHosted", "HealthCheck" } },
                { "Présentation Workshop technique", new List<string>() { "TDD", "Design Pattern", "DDD", "Refactoring" } },
                { "Utilisation d'AppInsight, ELK", new List<string>() { "Dashboard", "Monitoring", "Alerting", "KQL" } },
                { "Utilisation d'Azure Cloud", new List<string>() { "Azure function", "Blob storage", "Service Bus"} },
            }),
            new ExperienceItem(date: "2018 – JUIN 2021", enterprise: "Métropole Nice Côte d'Azur", poste: "Lead Tech", items: new Dictionary<string, List<string>>()
            {
                { "Encadrement d’une équipe de développeur", new List<string>() { "Explication des patterns", "Code review", "Pair programming" } },
                { "Mise en place de l'architecture", new List<string>() { "Clean Architecture", "CQRS" } },
                { "Utilisation de Mediatr", new List<string>() },
                { "Mise en place des qualités du code", new List<string>() { "SonarQube", "Quality gates", "CI/CD"} },
            }),
            new ExperienceItem(date: "2016 – 2018", enterprise: "Métropole Nice Côte d'Azur", poste: "Ingénieur études et développement", items: new Dictionary<string, List<string>>()
            {
                { "Réalisation de plusieurs applications Web", new List<string>() { "Asp Webform", "Asp classique", "Asp MVC" } },
                { "Réalisation de plusieurs applications client lourd", new List<string>() { "WPF", "Winform" } },
                { "URéalisation de WebService", new List<string>() { "WCF", "Web API"} },
            }),
        };
    }


}